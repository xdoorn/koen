/***********************************\
 *                                 *
 *  Koen © 2022, Xander van Doorn  *
 *                                 *
\***********************************/

#pragma once

#include <format>
#include <iostream>
#include <string>

using namespace std;

#define BITMASK unsigned __int64

/* a=target variable, b=bit number to act upon 0-n */
#define BIT_SET(a,b) ((a) |= (1ULL<<(b)))
#define BIT_CLEAR(a,b) ((a) &= ~(1ULL<<(b)))
#define BIT_FLIP(a,b) ((a) ^= (1ULL<<(b)))
#define BIT_CHECK(a,b) (!!((a) & (1ULL<<(b))))        // '!!' to make sure this returns 0 or 1

#define BITMASK_SET(x, mask) ((x) |= (mask))
#define BITMASK_CLEAR(x, mask) ((x) &= (~(mask)))
#define BITMASK_FLIP(x, mask) ((x) ^= (mask))
#define BITMASK_CHECK_ALL(x, mask) (!(~(x) & (mask)))
#define BITMASK_CHECK_ANY(x, mask) ((x) & (mask))

// Colors
enum { W, B};

// Pieces. 
enum 
{ 
  P,     // Pawn
         // B The bishop is omitted because it is already indexed in Colors.
  N = 2, // Knight
  R,     // Rook
  Q,     // Queen
  K,     // King
  X,     // Any piece (used in unittests)
  E,     // Empty
};

// Direction
enum
{
  NORTH,
  NORTHEAST,
  EAST,
  SOUTHEAST,
  SOUTH,
  SOUTHWEST,
  WEST,
  NORTHWEST
};

// Square, file and rank indices.
enum {
  A8, B8, C8, D8, E8, F8, G8, H8,
  A7, B7, C7, D7, E7, F7, G7, H7,
  A6, B6, C6, D6, E6, F6, G6, H6,
  A5, B5, C5, D5, E5, F5, G5, H5,
  A4, B4, C4, D4, E4, F4, G4, H4,
  A3, B3, C3, D3, E3, F3, G3, H3,
  A2, B2, C2, D2, E2, F2, G2, H2,
  A1, B1, C1, D1, E1, F1, G1, H1, };
enum { FILE_A, FILE_B, FILE_C, FILE_D, FILE_E, FILE_F, FILE_G, FILE_H };
enum { RANK_8, RANK_7, RANK_6, RANK_5, RANK_4, RANK_3, RANK_2, RANK_1};

enum { CASTLE_LONG, CASTLE_SHORT };

const int ix_mirror[64]
{
  A1, B1, C1, D1, E1, F1, G1, H1,
  A2, B2, C2, D2, E2, F2, G2, H2,
  A3, B3, C3, D3, E3, F3, G3, H3,
  A4, B4, C4, D4, E4, F4, G4, H4,
  A5, B5, C5, D5, E5, F5, G5, H5,
  A6, B6, C6, D6, E6, F6, G6, H6,
  A7, B7, C7, D7, E7, F7, G7, H7,
  A8, B8, C8, D8, E8, F8, G8, H8,
};

const BITMASK bm_empty = 0x0000000000000000;
const BITMASK bm_full =  0xFFFFFFFFFFFFFFFF;
const BITMASK bm_camp[2] = { 0xFFFFFFFF00000000, 0x00000000FFFFFFFF };
const BITMASK bm_file[8] = { 0x0101010101010101, 0x0202020202020202, 0x0404040404040404, 0x0808080808080808, 0x1010101010101010, 0x2020202020202020, 0x4040404040404040, 0x8080808080808080 };
const BITMASK bm_rank[8] = { 0x00000000000000FF, 0x000000000000FF00, 0x0000000000FF0000, 0x00000000FF000000, 0x000000FF00000000, 0x0000FF0000000000, 0x00FF000000000000, 0xFF00000000000000 };
const BITMASK bm_squares[64] =
{
  0x0000000000000001, 0x0000000000000002, 0x0000000000000004, 0x0000000000000008, 0x0000000000000010, 0x0000000000000020, 0x0000000000000040, 0x0000000000000080,
  0x0000000000000100, 0x0000000000000200, 0x0000000000000400, 0x0000000000000800, 0x0000000000001000, 0x0000000000002000, 0x0000000000004000, 0x0000000000008000,
  0x0000000000010000, 0x0000000000020000, 0x0000000000040000, 0x0000000000080000, 0x0000000000100000, 0x0000000000200000, 0x0000000000400000, 0x0000000000800000,
  0x0000000001000000, 0x0000000002000000, 0x0000000004000000, 0x0000000008000000, 0x0000000010000000, 0x0000000020000000, 0x0000000040000000, 0x0000000080000000,
  0x0000000100000000, 0x0000000200000000, 0x0000000400000000, 0x0000000800000000, 0x0000001000000000, 0x0000002000000000, 0x0000004000000000, 0x0000008000000000,
  0x0000010000000000, 0x0000020000000000, 0x0000040000000000, 0x0000080000000000, 0x0000100000000000, 0x0000200000000000, 0x0000400000000000, 0x0000800000000000,
  0x0001000000000000, 0x0002000000000000, 0x0004000000000000, 0x0008000000000000, 0x0010000000000000, 0x0020000000000000, 0x0040000000000000, 0x0080000000000000,
  0x0100000000000000, 0x0200000000000000, 0x0400000000000000, 0x0800000000000000, 0x1000000000000000, 0x2000000000000000, 0x4000000000000000, 0x8000000000000000,
};
const BITMASK bm_xsquares[64] =
{
  0xFFFFFFFFFFFFFFFE, 0xFFFFFFFFFFFFFFFD, 0xFFFFFFFFFFFFFFFB, 0xFFFFFFFFFFFFFFF7, 0xFFFFFFFFFFFFFFEF, 0xFFFFFFFFFFFFFFDF, 0xFFFFFFFFFFFFFFBF, 0xFFFFFFFFFFFFFF7F,
  0xFFFFFFFFFFFFFEFF, 0xFFFFFFFFFFFFFDFF, 0xFFFFFFFFFFFFFBFF, 0xFFFFFFFFFFFFF7FF, 0xFFFFFFFFFFFFEFFF, 0xFFFFFFFFFFFFDFFF, 0xFFFFFFFFFFFFBFFF, 0xFFFFFFFFFFFF7FFF,
  0xFFFFFFFFFFFEFFFF, 0xFFFFFFFFFFFDFFFF, 0xFFFFFFFFFFFBFFFF, 0xFFFFFFFFFFF7FFFF, 0xFFFFFFFFFFEFFFFF, 0xFFFFFFFFFFDFFFFF, 0xFFFFFFFFFFBFFFFF, 0xFFFFFFFFFF7FFFFF,
  0xFFFFFFFFFEFFFFFF, 0xFFFFFFFFFDFFFFFF, 0xFFFFFFFFFBFFFFFF, 0xFFFFFFFFF7FFFFFF, 0xFFFFFFFFEFFFFFFF, 0xFFFFFFFFDFFFFFFF, 0xFFFFFFFFBFFFFFFF, 0xFFFFFFFF7FFFFFFF,
  0xFFFFFFFEFFFFFFFF, 0xFFFFFFFDFFFFFFFF, 0xFFFFFFFBFFFFFFFF, 0xFFFFFFF7FFFFFFFF, 0xFFFFFFEFFFFFFFFF, 0xFFFFFFDFFFFFFFFF, 0xFFFFFFBFFFFFFFFF, 0xFFFFFF7FFFFFFFFF,
  0xFFFFFEFFFFFFFFFF, 0xFFFFFDFFFFFFFFFF, 0xFFFFFBFFFFFFFFFF, 0xFFFFF7FFFFFFFFFF, 0xFFFFEFFFFFFFFFFF, 0xFFFFDFFFFFFFFFFF, 0xFFFFBFFFFFFFFFFF, 0xFFFF7FFFFFFFFFFF,
  0xFFFEFFFFFFFFFFFF, 0xFFFDFFFFFFFFFFFF, 0xFFFBFFFFFFFFFFFF, 0xFFF7FFFFFFFFFFFF, 0xFFEFFFFFFFFFFFFF, 0xFFDFFFFFFFFFFFFF, 0xFFBFFFFFFFFFFFFF, 0xFF7FFFFFFFFFFFFF,
  0xFEFFFFFFFFFFFFFF, 0xFDFFFFFFFFFFFFFF, 0xFBFFFFFFFFFFFFFF, 0xF7FFFFFFFFFFFFFF, 0xEFFFFFFFFFFFFFFF, 0xDFFFFFFFFFFFFFFF, 0xBFFFFFFFFFFFFFFF, 0x7FFFFFFFFFFFFFFF,
};
const BITMASK bm_castle[2][2] =
{
  { 0x0E00000000000000 /* W_CASTLE_LONG */, 0x6000000000000000 /* W_CASTLE_SHORT */},
  { 0x000000000000000E /* B_CASTLE_LONG */, 0x0000000000000060 /* B_CASTLE_SHORT */ }
};
const BITMASK bm_castle_rook_flip[64]
{
  0x0000000000000000, 0x0000000000000000, 0x0000000000000009 /* A8 | D8 */, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x00000000000000A0 /* F8 | H8 */, 0x0000000000000000,
  0x0000000000000000, 0x0000000000000000, 0x0000000000000000 /*         */, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000 /*         */, 0x0000000000000000,
  0x0000000000000000, 0x0000000000000000, 0x0000000000000000 /*         */, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000 /*         */, 0x0000000000000000,
  0x0000000000000000, 0x0000000000000000, 0x0000000000000000 /*         */, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000 /*         */, 0x0000000000000000,
  0x0000000000000000, 0x0000000000000000, 0x0000000000000000 /*         */, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000 /*         */, 0x0000000000000000,
  0x0000000000000000, 0x0000000000000000, 0x0000000000000000 /*         */, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000 /*         */, 0x0000000000000000,
  0x0000000000000000, 0x0000000000000000, 0x0000000000000000 /*         */, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000 /*         */, 0x0000000000000000,
  0x0000000000000000, 0x0000000000000000, 0x0900000000000000 /* A1 | D1 */, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0xA000000000000000 /* F1 | H1 */, 0x0000000000000000,
};
const BITMASK bm_castle_rook_from[2][64]
{
  { 
    0x0000000000000000 /*         */, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
    0x0000000000000000 /*         */, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
    0x0000000000000000 /*         */, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
    0x0000000000000000 /*         */, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
    0x0000000000000000 /*         */, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
    0x0000000000000000 /*         */, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
    0x0000000000000000 /*         */, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
    0x0E00000000000000 /* C1 | D1 */, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x6000000000000000, /* F1 */ 
  },
  {
    0x000000000000000E /* C8 | D8 */, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000060, /* F8 */
    0x0000000000000000 /*         */, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
    0x0000000000000000 /*         */, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
    0x0000000000000000 /*         */, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
    0x0000000000000000 /*         */, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
    0x0000000000000000 /*         */, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
    0x0000000000000000 /*         */, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
    0x0000000000000000 /*         */, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
  }
};
const int ix_castle_rook_from[64]
{
  -1, -1, A8, -1, -1, -1, H8, -1,
  -1, -1, -1, -1, -1, -1, -1, -1,
  -1, -1, -1, -1, -1, -1, -1, -1,
  -1, -1, -1, -1, -1, -1, -1, -1,
  -1, -1, -1, -1, -1, -1, -1, -1,
  -1, -1, -1, -1, -1, -1, -1, -1,
  -1, -1, -1, -1, -1, -1, -1, -1,
  -1, -1, A1, -1, -1, -1, H1, -1,
};
const int ix_castle_rook_to[64]
{
  -1, -1, D8, -1, -1, -1, F8, -1,
  -1, -1, -1, -1, -1, -1, -1, -1,
  -1, -1, -1, -1, -1, -1, -1, -1,
  -1, -1, -1, -1, -1, -1, -1, -1,
  -1, -1, -1, -1, -1, -1, -1, -1,
  -1, -1, -1, -1, -1, -1, -1, -1,
  -1, -1, -1, -1, -1, -1, -1, -1,
  -1, -1, D1, -1, -1, -1, F1, -1,
};
const BITMASK bm_kingmoves[64] =
{
  0x0000000000000302, 0x0000000000000705, 0x0000000000000E0A, 0x0000000000001C14, 0x0000000000003828, 0x0000000000007050, 0x000000000000E0A0, 0x000000000000C040,
  0x0000000000030203, 0x0000000000070507, 0x00000000000E0A0E, 0x00000000001C141C, 0x0000000000382838, 0x0000000000705070, 0x0000000000E0A0E0, 0x0000000000C040C0,
  0x0000000003020300, 0x0000000007050700, 0x000000000E0A0E00, 0x000000001C141C00, 0x0000000038283800, 0x0000000070507000, 0x00000000E0A0E000, 0x00000000C040C000,
  0x0000000302030000, 0x0000000705070000, 0x0000000E0A0E0000, 0x0000001C141C0000, 0x0000003828380000, 0x0000007050700000, 0x000000E0A0E00000, 0x000000C040C00000,
  0x0000030203000000, 0x0000070507000000, 0x00000E0A0E000000, 0x00001C141C000000, 0x0000382838000000, 0x0000705070000000, 0x0000E0A0E0000000, 0x0000C040C0000000,
  0x0003020300000000, 0x0007050700000000, 0x000E0A0E00000000, 0x001C141C00000000, 0x0038283800000000, 0x0070507000000000, 0x00E0A0E000000000, 0x00C040C000000000,
  0x0302030000000000, 0x0705070000000000, 0x0E0A0E0000000000, 0x1C141C0000000000, 0x3828380000000000, 0x7050700000000000, 0xE0A0E00000000000, 0xC040C00000000000,
  0x0203000000000000, 0x0507000000000000, 0x0A0E000000000000, 0x141C000000000000, 0x2838000000000000, 0x5070000000000000, 0xA0E0000000000000, 0x40C0000000000000,
};
const BITMASK bm_rangemoves[8][64] =
{
  { // NORTH
    0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
    0x0000000000000001, 0x0000000000000002, 0x0000000000000004, 0x0000000000000008, 0x0000000000000010, 0x0000000000000020, 0x0000000000000040, 0x0000000000000080,
    0x0000000000000101, 0x0000000000000202, 0x0000000000000404, 0x0000000000000808, 0x0000000000001010, 0x0000000000002020, 0x0000000000004040, 0x0000000000008080,
    0x0000000000010101, 0x0000000000020202, 0x0000000000040404, 0x0000000000080808, 0x0000000000101010, 0x0000000000202020, 0x0000000000404040, 0x0000000000808080,
    0x0000000001010101, 0x0000000002020202, 0x0000000004040404, 0x0000000008080808, 0x0000000010101010, 0x0000000020202020, 0x0000000040404040, 0x0000000080808080,
    0x0000000101010101, 0x0000000202020202, 0x0000000404040404, 0x0000000808080808, 0x0000001010101010, 0x0000002020202020, 0x0000004040404040, 0x0000008080808080,
    0x0000010101010101, 0x0000020202020202, 0x0000040404040404, 0x0000080808080808, 0x0000101010101010, 0x0000202020202020, 0x0000404040404040, 0x0000808080808080,
    0x0001010101010101, 0x0002020202020202, 0x0004040404040404, 0x0008080808080808, 0x0010101010101010, 0x0020202020202020, 0x0040404040404040, 0x0080808080808080,
  },
  { // NORTHEAST
    0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
    0x0000000000000002, 0x0000000000000004, 0x0000000000000008, 0x0000000000000010, 0x0000000000000020, 0x0000000000000040, 0x0000000000000080, 0x0000000000000000,
    0x0000000000000204, 0x0000000000000408, 0x0000000000000810, 0x0000000000001020, 0x0000000000002040, 0x0000000000004080, 0x0000000000008000, 0x0000000000000000,
    0x0000000000020408, 0x0000000000040810, 0x0000000000081020, 0x0000000000102040, 0x0000000000204080, 0x0000000000408000, 0x0000000000800000, 0x0000000000000000,
    0x0000000002040810, 0x0000000004081020, 0x0000000008102040, 0x0000000010204080, 0x0000000020408000, 0x0000000040800000, 0x0000000080000000, 0x0000000000000000,
    0x0000000204081020, 0x0000000408102040, 0x0000000810204080, 0x0000001020408000, 0x0000002040800000, 0x0000004080000000, 0x0000008000000000, 0x0000000000000000,
    0x0000020408102040, 0x0000040810204080, 0x0000081020408000, 0x0000102040800000, 0x0000204080000000, 0x0000408000000000, 0x0000800000000000, 0x0000000000000000,
    0x0002040810204080, 0x0004081020408000, 0x0008102040800000, 0x0010204080000000, 0x0020408000000000, 0x0040800000000000, 0x0080000000000000, 0x0000000000000000,
  },
  { // EAST
    0x00000000000000FE, 0x00000000000000FC, 0x00000000000000F8, 0x00000000000000F0, 0x00000000000000E0, 0x00000000000000C0, 0x0000000000000080, 0x0000000000000000,
    0x000000000000FE00, 0x000000000000FC00, 0x000000000000F800, 0x000000000000F000, 0x000000000000E000, 0x000000000000C000, 0x0000000000008000, 0x0000000000000000,
    0x0000000000FE0000, 0x0000000000FC0000, 0x0000000000F80000, 0x0000000000F00000, 0x0000000000E00000, 0x0000000000C00000, 0x0000000000800000, 0x0000000000000000,
    0x00000000FE000000, 0x00000000FC000000, 0x00000000F8000000, 0x00000000F0000000, 0x00000000E0000000, 0x00000000C0000000, 0x0000000080000000, 0x0000000000000000,
    0x000000FE00000000, 0x000000FC00000000, 0x000000F800000000, 0x000000F000000000, 0x000000E000000000, 0x000000C000000000, 0x0000008000000000, 0x0000000000000000,
    0x0000FE0000000000, 0x0000FC0000000000, 0x0000F80000000000, 0x0000F00000000000, 0x0000E00000000000, 0x0000C00000000000, 0x0000800000000000, 0x0000000000000000,
    0x00FE000000000000, 0x00FC000000000000, 0x00F8000000000000, 0x00F0000000000000, 0x00E0000000000000, 0x00C0000000000000, 0x0080000000000000, 0x0000000000000000,
    0xFE00000000000000, 0xFC00000000000000, 0xF800000000000000, 0xF000000000000000, 0xE000000000000000, 0xC000000000000000, 0x8000000000000000, 0x0000000000000000,
  },
  { // SOUTHEAST
    0x8040201008040200, 0x0080402010080400, 0x0000804020100800, 0x0000008040201000, 0x0000000080402000, 0x0000000000804000, 0x0000000000008000, 0x0000000000000000,
    0x4020100804020000, 0x8040201008040000, 0x0080402010080000, 0x0000804020100000, 0x0000008040200000, 0x0000000080400000, 0x0000000000800000, 0x0000000000000000,
    0x2010080402000000, 0x4020100804000000, 0x8040201008000000, 0x0080402010000000, 0x0000804020000000, 0x0000008040000000, 0x0000000080000000, 0x0000000000000000,
    0x1008040200000000, 0x2010080400000000, 0x4020100800000000, 0x8040201000000000, 0x0080402000000000, 0x0000804000000000, 0x0000008000000000, 0x0000000000000000,
    0x0804020000000000, 0x1008040000000000, 0x2010080000000000, 0x4020100000000000, 0x8040200000000000, 0x0080400000000000, 0x0000800000000000, 0x0000000000000000,
    0x0402000000000000, 0x0804000000000000, 0x1008000000000000, 0x2010000000000000, 0x4020000000000000, 0x8040000000000000, 0x0080000000000000, 0x0000000000000000,
    0x0200000000000000, 0x0400000000000000, 0x0800000000000000, 0x1000000000000000, 0x2000000000000000, 0x4000000000000000, 0x8000000000000000, 0x0000000000000000,
    0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
  },
  { // SOUTH
    0x0101010101010100, 0x0202020202020200, 0x0404040404040400, 0x0808080808080800, 0x1010101010101000, 0x2020202020202000, 0x4040404040404000, 0x8080808080808000,
    0x0101010101010000, 0x0202020202020000, 0x0404040404040000, 0x0808080808080000, 0x1010101010100000, 0x2020202020200000, 0x4040404040400000, 0x8080808080800000,
    0x0101010101000000, 0x0202020202000000, 0x0404040404000000, 0x0808080808000000, 0x1010101010000000, 0x2020202020000000, 0x4040404040000000, 0x8080808080000000,
    0x0101010100000000, 0x0202020200000000, 0x0404040400000000, 0x0808080800000000, 0x1010101000000000, 0x2020202000000000, 0x4040404000000000, 0x8080808000000000,
    0x0101010000000000, 0x0202020000000000, 0x0404040000000000, 0x0808080000000000, 0x1010100000000000, 0x2020200000000000, 0x4040400000000000, 0x8080800000000000,
    0x0101000000000000, 0x0202000000000000, 0x0404000000000000, 0x0808000000000000, 0x1010000000000000, 0x2020000000000000, 0x4040000000000000, 0x8080000000000000,
    0x0100000000000000, 0x0200000000000000, 0x0400000000000000, 0x0800000000000000, 0x1000000000000000, 0x2000000000000000, 0x4000000000000000, 0x8000000000000000,
    0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
  },
  { // SOUTHWEST
    0x0000000000000000, 0x0000000000000100, 0x0000000000010200, 0x0000000001020400, 0x0000000102040800, 0x0000010204081000, 0x0001020408102000, 0x0102040810204000,
    0x0000000000000000, 0x0000000000010000, 0x0000000001020000, 0x0000000102040000, 0x0000010204080000, 0x0001020408100000, 0x0102040810200000, 0x0204081020400000,
    0x0000000000000000, 0x0000000001000000, 0x0000000102000000, 0x0000010204000000, 0x0001020408000000, 0x0102040810000000, 0x0204081020000000, 0x0408102040000000,
    0x0000000000000000, 0x0000000100000000, 0x0000010200000000, 0x0001020400000000, 0x0102040800000000, 0x0204081000000000, 0x0408102000000000, 0x0810204000000000,
    0x0000000000000000, 0x0000010000000000, 0x0001020000000000, 0x0102040000000000, 0x0204080000000000, 0x0408100000000000, 0x0810200000000000, 0x1020400000000000,
    0x0000000000000000, 0x0001000000000000, 0x0102000000000000, 0x0204000000000000, 0x0408000000000000, 0x0810000000000000, 0x1020000000000000, 0x2040000000000000,
    0x0000000000000000, 0x0100000000000000, 0x0200000000000000, 0x0400000000000000, 0x0800000000000000, 0x1000000000000000, 0x2000000000000000, 0x4000000000000000,
    0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
  },
  { // WEST
    0x0000000000000000, 0x0000000000000001, 0x0000000000000003, 0x0000000000000007, 0x000000000000000F, 0x000000000000001F, 0x000000000000003F, 0x000000000000007F,
    0x0000000000000000, 0x0000000000000100, 0x0000000000000300, 0x0000000000000700, 0x0000000000000F00, 0x0000000000001F00, 0x0000000000003F00, 0x0000000000007F00,
    0x0000000000000000, 0x0000000000010000, 0x0000000000030000, 0x0000000000070000, 0x00000000000F0000, 0x00000000001F0000, 0x00000000003F0000, 0x00000000007F0000,
    0x0000000000000000, 0x0000000001000000, 0x0000000003000000, 0x0000000007000000, 0x000000000F000000, 0x000000001F000000, 0x000000003F000000, 0x000000007F000000,
    0x0000000000000000, 0x0000000100000000, 0x0000000300000000, 0x0000000700000000, 0x0000000F00000000, 0x0000001F00000000, 0x0000003F00000000, 0x0000007F00000000,
    0x0000000000000000, 0x0000010000000000, 0x0000030000000000, 0x0000070000000000, 0x00000F0000000000, 0x00001F0000000000, 0x00003F0000000000, 0x00007F0000000000,
    0x0000000000000000, 0x0001000000000000, 0x0003000000000000, 0x0007000000000000, 0x000F000000000000, 0x001F000000000000, 0x003F000000000000, 0x007F000000000000,
    0x0000000000000000, 0x0100000000000000, 0x0300000000000000, 0x0700000000000000, 0x0F00000000000000, 0x1F00000000000000, 0x3F00000000000000, 0x7F00000000000000,
  },
  { // NORTHWEST
    0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
    0x0000000000000000, 0x0000000000000001, 0x0000000000000002, 0x0000000000000004, 0x0000000000000008, 0x0000000000000010, 0x0000000000000020, 0x0000000000000040,
    0x0000000000000000, 0x0000000000000100, 0x0000000000000201, 0x0000000000000402, 0x0000000000000804, 0x0000000000001008, 0x0000000000002010, 0x0000000000004020,
    0x0000000000000000, 0x0000000000010000, 0x0000000000020100, 0x0000000000040201, 0x0000000000080402, 0x0000000000100804, 0x0000000000201008, 0x0000000000402010,
    0x0000000000000000, 0x0000000001000000, 0x0000000002010000, 0x0000000004020100, 0x0000000008040201, 0x0000000010080402, 0x0000000020100804, 0x0000000040201008,
    0x0000000000000000, 0x0000000100000000, 0x0000000201000000, 0x0000000402010000, 0x0000000804020100, 0x0000001008040201, 0x0000002010080402, 0x0000004020100804,
    0x0000000000000000, 0x0000010000000000, 0x0000020100000000, 0x0000040201000000, 0x0000080402010000, 0x0000100804020100, 0x0000201008040201, 0x0000402010080402,
    0x0000000000000000, 0x0001000000000000, 0x0002010000000000, 0x0004020100000000, 0x0008040201000000, 0x0010080402010000, 0x0020100804020100, 0x0040201008040201,
  }
};

// https://www.chessprogramming.org/BitScan#De_Bruijn_Multiplication
const int bitScanIndices[64] = 
{
    0, 47,  1, 56, 48, 27,  2, 60,
   57, 49, 41, 37, 28, 16,  3, 61,
   54, 58, 35, 52, 50, 42, 21, 44,
   38, 32, 29, 23, 17, 11,  4, 62,
   46, 55, 26, 59, 40, 36, 15, 53,
   34, 51, 20, 43, 31, 22, 10, 45,
   25, 39, 14, 33, 19, 30,  9, 24,
   13, 18,  8, 12,  7,  6,  5, 63
};

// https://www.chessprogramming.org/BitScan#De_Bruijn_Multiplication
const BITMASK bm_debruijn64 = 0x03f79d71b4cb0a89;

// 
/**
 * Returns the index of the LSB (e.g. starting from A8 (0) to H1 (63)).
 * 
 * The implementation is found on https://www.chessprogramming.org/BitScan#De_Bruijn_Multiplication
 * @author Kim Walisch (2012)
 * @param bb bitboard to scan
 * @precondition bb != 0
 * @return index (0..63) of least significant one bit */
int bitScan(BITMASK i_bitmask);

string toBitMaskHexString(BITMASK i_bitmask);
string toBitMask1DString(BITMASK i_bitmask, string i_rankSeparator = " /");
string toBitMask2DString(BITMASK i_bitmask, bool i_includeHexValue = true);
string toBitMaskArrayVariable(BITMASK i_bitmask[64], string i_variableName);